@page "/echo"
@using Grpc.Net.Client
@using Sandbox.gRPC

<h3>Echo</h3>
<p />
<h4>Enter you name</h4>
<inputTest></inputTest>
<input type="text" @bind="@(_name)" @bind:event="oninput" />
<p />
<button class="btn btn-outline-primary" disabled="@(_name.Length < 1)" @onclick="SendMessage">Send</button>
<p />
<h4 hidden="@(_response.Length < 1)">Echo: @(_response)</h4>
<p />
<span class="alert-danger" hidden="@(_error.Length < 1)">ERROR: @(_error)</span>

@code {

        string _name     = string.Empty;
        string _response = string.Empty;
        string _error    = string.Empty;

        async Task SendMessage()
        {
            try
            {
                var name = _name;

                _name = string.Empty;

#if DEBUG
                var httpClientHandler = new HttpClientHandler
                                        {
                                            // Return `true` to allow certificates that are untrusted/invalid
                                            ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                                        };


                var httpClient = new HttpClient(httpClientHandler);

                var channel = GrpcChannel.ForAddress(address: "https://grpc-sandbox", new GrpcChannelOptions { HttpClient = httpClient });
#else
                var channel = GrpcChannel.ForAddress(address: "https://grpc-sandbox");
#endif
                var client = new Greeter.GreeterClient(channel);

            _response = (await client.SayHelloAsync(new HelloRequest { Name = name })).Message;
        }
        catch (Exception exception) 
        {
            _error = exception.Message;
        }
    }
}
